{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","console","log","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c5462330.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\n// Note: props is just like self that we used in python\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        {/* <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n        </li> */}\n      </ul>\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form> */}\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n    </div>\n    </div>\n  </div>\n</nav>\n    )\n}\n\n// Note propTypes helps to distinguish between data types of variables\n// Its like handling exception\n// Note: isRequired is used for: tyo value chaii pass garnai paryo khali xordnu paedaeaa otherwise error aauxa\n// but tala defaultProps already set garya xa and props ko value ni pass garya xa so aile chaii isRequired ko result dekhidaena\nNavbar.propTypes = {title: PropTypes.string.isRequired,\naboutText: PropTypes.string.isRequired}\n\n// This one is the default if props is not set then this will be shown on our browser\n// vannu ko matlab yedi props haru pass garya xaina vaney by default chaii yo kura haru dekhauney\n// yedi yesko result hernu xa vaney App.js ma gaera <Navbar/> maatra pass garnu without any props value\nNavbar.defaultProps = {title: \"Set title here\",\naboutText: \"Set about here\"}","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n\n    const handleUpClick = () => {\n        console.log(\"Uppercase was clicked \" + text);\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\n    }\n\n    const handleLoClick = () => {\n        console.log(\"Lowercase was clicked \" + text);\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to Lowecase!\", \"success\");\n    }\n\n    const handleClearClick = () => {\n        console.log(\"Clear was clicked \" + text);\n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text has been cleared!\", \"success\");\n    }\n\n    const handleCopy = ()=>{\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text has been copied!\", \"success\");\n    }\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra space has been removed!\", \"success\");\n    }\n\n    const handleOnChange = (event) => {\n        // Note: here  setText(event.target.value) is used: poila ko text variable ma j value thyo tyo + new value sanga jodera update garxa\n        setText(event.target.value);\n    }\n\n    // Note: useState pahilo kura ta kunaii function vitra raakhnu ani maatra kaam garxa\n    // Note: here we are using state (nepali ma awastha vaninxa)\n    // const vitra de-structure use vako xa and text vaneko variable ho and setText vaneko function ho\n    // yedi hami laii text vanney variable ma keii update garna mann lagyo vaney setText vanney function ko through garney ho\n    // useState('Enter text here') is defaault value \n    const [text, setText] = useState('');\n    // Below is the wrong way to change the state\n    // text = \"I am the wrong way to change the state\";\n    // Below is the right way to change the starte\n    // setText(\"I am the right way of changing the state\");\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            {/* here after props.heading we call the useState variable named as text which is already defined above */}\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <div className=\"container\">\n                    {/* Note value = {text} is useState variable that is already defined above */}\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n                </div>\n            </div>\n            {/* Note: here below, there is onClick mean to say that thichda feri k huney like event handling */}\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button> \n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>  \n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear</button>  \n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>  \n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Cut Extra Spaces</button>  \n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            {/* Here below: text.length gives number of characters and text.split(\" \").length gives an array which have words and its length is the number of words */}\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\n            {/* Below: calculating the total minutes that can be taken to read the entered characters in text area */}\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Enter something in the text box above to preview it here\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=> {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n// import About from './components/About';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if (setMode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"Bikal's T-Utils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // Note: Strict mode is turned on here so that we won't have any bugs in future\n  // Note yaha tall <App /> component xa tyo jasto dekhinxa hamro site ni testae dekhinxa\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root') // vannu ko matlab k ho vaney jaha index.html file vitra root vanney Id vetinxa tyaha gaera App component laii haal vanya ho \n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}